// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "sonartest_cart/app/dto"
	internal "sonartest_cart/app/internal"

	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *UserRepo) GetUserByUsername(username string) (*internal.Userdetail, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *internal.Userdetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*internal.Userdetail, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *internal.Userdetail); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Userdetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserActive provides a mock function with given fields: userID
func (_m *UserRepo) IsUserActive(userID int64) (bool, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserActive")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserDetails provides a mock function with given fields: args
func (_m *UserRepo) SaveUserDetails(args *dto.UserDetailSaveRequest) (int64, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserDetails")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.UserDetailSaveRequest) (int64, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(*dto.UserDetailSaveRequest) int64); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*dto.UserDetailSaveRequest) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
